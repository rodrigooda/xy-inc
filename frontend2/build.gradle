buildscript {
    ext {
        gradleNodeVersion = '1.2.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$gradleNodeVersion"
    }
}



//------------------------------------------------------------------------------------------------------------------------
//    Plugins - Application
//------------------------------------------------------------------------------------------------------------------------

apply plugin: 'com.moowork.node'

//------------------------------------------------------------------------------------------------------------------------
//    Plugin configuration
//------------------------------------------------------------------------------------------------------------------------

node {
    version = '8.11.3'
    npmVersion = '6.0.1'
    download = true
    workDir = file("${project.buildDir}/node")
    nodeModulesDir = file("${project.projectDir}")
}



//------------------------------------------------------------------------------------------------------------------------
//    Tasks - NPM
//------------------------------------------------------------------------------------------------------------------------

task cleanFrontend(type: Delete) {
    description = 'Apaga os arquivos de build do frontend'
    group 'build frontend'
	println "${rootDir}/backend/src/main/resources/static"
    delete "${project.buildDir}/dist", "${rootDir}/backend/src/main/resources/static"
}

task cleanNpm(type: Delete) {
    description = 'Apaga os diretórios de dependências do node'
    group 'build frontend'
    dependsOn 'clean'
    delete "${project.buildDir}/node", "${project.projectDir}/node_modules"
}

task npmUpdate {
    description = 'Roda o comando de update do npm'
    group 'build frontend'
    dependsOn 'npm_update'
}

//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Standalone client
//------------------------------------------------------------------------------------------------------------------------

task buildStandaloneFrontend(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = 'Faz o build do frontend para desenvolvimento'
    args = ['run', 'buildStandalone']
}

task serveStandaloneFrontendWatch(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Faz o build e sobe o frontend com observador de alterações para rebuild"
    args = ['run', 'serveStandaloneWatch']
}

task serveStandaloneFrontend(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Faz o build do frontend para produção"
    args = ['start']
}

task bootStandaloneFrontend(type: GradleBuild) {
    group 'application'
    description = "Faz o build e sobe o frontend para desenvolvimento"
    setTasks(['cleanFrontend', 'buildStandaloneFrontend', 'serveStandaloneFrontend'])
}

task bootStandaloneFrontendWatch(type: GradleBuild) {
    group 'application'
    description = "Faz o build e sobe o frontend com observadores para desenvolvimento"
    setTasks(['cleanFrontend', 'serveStandaloneFrontendWatch'])
}

//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Integrated client
//------------------------------------------------------------------------------------------------------------------------

task buildFrontendToSpring(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Faz o build e copia os arquivos de build para o spring"
    args = ['run', 'buildToSpring']
}

task buildFrontendToSpringProd(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Faz o build e copia os arquivos de build para o spring"
    args = ['run', 'buildToSpringProd']
}